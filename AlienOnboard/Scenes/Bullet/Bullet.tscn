[gd_scene load_steps=9 format=3 uid="uid://rt3g3qyepaqv"]

[ext_resource type="Script" path="res://Scenes/Bullet/Bullet.gd" id="1_k52cw"]
[ext_resource type="Script" path="res://Scenes/Bullet/traileffect.gd" id="2_kpbgb"]
[ext_resource type="AudioStream" uid="uid://bq7bxya1onlvo" path="res://Scenes/Bullet/pew1.mp3" id="3_htjgl"]

[sub_resource type="Shader" id="Shader_mbuul"]
code = "shader_type spatial;
render_mode shadows_disabled, specular_disabled, ambient_light_disabled, unshaded;


group_uniforms Shield_Color;
uniform vec3 _shield_color : source_color = vec3(5.0, 0.0, 0.0);
uniform float _shield_color_brightness : hint_range(0.25, 20.0, 0.05) = 10.0;
uniform float _shield_intensity : hint_range(0.25, 5.0, 0.05) = 2.0;

group_uniforms Shield_Transform;
uniform vec3 _rotation = vec3(0.1, 0.0, 0.0);
uniform float _shield_size : hint_range(0.0, 0.5, 0.01) = 0.0;

group_uniforms Shield_Pulse;
uniform float _shield_pulse_frequency = 1.0;
uniform float _shield_pulse_density = 1.0;
uniform float _shield_pulse_amplitude = 1.0;
uniform float _shield_pulse_blend = 1.0;
uniform float _shield_pulse_radius = 1.0;

group_uniforms Impact_Shape;
uniform vec3 _impact_origin = vec3(1.0, 0.0, 0.0);
uniform float _impact_frequency = 5.0;
uniform float _impact_density = 5.0;
uniform float _impact_amplitude = 6.0;
uniform float _impact_blend = 0;
uniform float _impact_radius = 1.1;
uniform float _impact_anim = 0.0;

// === IMPACT ===

float _GetRippleOrigin(vec3 vert, vec3 orig) {
	// distance of each vertex from the origin
	return length(orig - vert);
}

float _FadeRipple(float orig, float blend, float radius) {
	// create a radius 
	float b = clamp(blend, 0.0, radius);
	return smoothstep(b, -radius, orig);
}

float _ComputeRipple(vec3 vert, vec3 orig, float blend, float radius, float freq, float dens, float ampl, float anim) {
	// calculate the intensity of the impact
	float o = _GetRippleOrigin(vert, orig);
	float i = sin(anim * freq - o * dens) / ampl;
	return i * _FadeRipple(o, blend, radius);
}

// === SHIELD ===

float saturate(float x) {
  return max(0, min(1, x));
}

float ComputeFresnel(vec3 norm, vec3 view_dir, float intensity) {
	// dot product between mesh normals and view direction
	float fresnel = saturate(1.0 - dot(norm, view_dir));
	// modulate fresnel intensity
	fresnel = pow(fresnel, intensity);
	return fresnel;
}

vec3 Rotate(vec3 vert, vec3 speed) {
	// build the 3 rotation matrices
	speed = speed * TIME * 5.0;
	
	mat4 xrot = mat4(
		vec4(1.0, 0.0, 0.0, 0.0),
		vec4(0.0, cos(speed.x), -sin(speed.x), 0.0),
		vec4(0.0, sin(speed.x), cos(speed.x), 0.0),
		vec4(0.0, 0.0, 0.0, 1.0));
	
	mat4 yrot = mat4(
		vec4(cos(speed.y), 0.0, -sin(speed.y), 0.0),
		vec4(0.0, 1.0, 0.0, 0.0),
		vec4(sin(speed.y), 0.0, cos(speed.y), 0.0),
		vec4(0.0, 0.0, 0.0, 1.0));
	
	mat4 zrot = mat4(
		vec4(cos(speed.z), -sin(speed.z), 0.0, 0.0),
		vec4(sin(speed.z), cos(speed.z), 0.0, 0.0),
		vec4(0.0, 0.0, 1.0, 0.0),
		vec4(0.0, 0.0, 0.0, 1.0));
		
	return (xrot * yrot * zrot * vec4(vert, 1.0)).xyz;
}

void vertex() {
	// rotate VERTICES in local space
	VERTEX = Rotate(VERTEX, _rotation);
	// ...and relative NORMALS for the fresnel effect to work
	NORMAL = Rotate(NORMAL, _rotation);
	
	// Local to World conversion to add impact ripple
	vec3 w_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	
	// normalize impact origin vector
	vec3 imp_or = normalize(_impact_origin);
	
	float impact_ripple = _ComputeRipple(w_pos, 
		_impact_origin, 
		_impact_blend,
		_impact_radius, 
		_impact_frequency, 
		_impact_density, 
		_impact_amplitude,
		_impact_anim);
	
	VERTEX += NORMAL * (impact_ripple + _shield_size);
}

void fragment() {
        // add fresnel
	float f = ComputeFresnel(NORMAL, VIEW, _shield_intensity);
	// set color and alpha
	ALBEDO = f * _shield_color_brightness * _shield_color;
	ALPHA *= f;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_38dvc"]
render_priority = 0
shader = SubResource("Shader_mbuul")
shader_parameter/_shield_color = Color(1, 0, 0, 1)
shader_parameter/_shield_color_brightness = 20.0
shader_parameter/_shield_intensity = 0.25
shader_parameter/_rotation = Vector3(0.1, 0, 0)
shader_parameter/_shield_size = 0.0
shader_parameter/_shield_pulse_frequency = 1.0
shader_parameter/_shield_pulse_density = 1.0
shader_parameter/_shield_pulse_amplitude = 1.0
shader_parameter/_shield_pulse_blend = 1.0
shader_parameter/_shield_pulse_radius = 1.0
shader_parameter/_impact_origin = Vector3(2.08165e-12, 2.08165e-12, 2.08165e-12)
shader_parameter/_impact_frequency = 5.0
shader_parameter/_impact_density = 5.0
shader_parameter/_impact_amplitude = 6.0
shader_parameter/_impact_blend = 0.0
shader_parameter/_impact_radius = 1.1
shader_parameter/_impact_anim = 0.0

[sub_resource type="SphereMesh" id="SphereMesh_n8wwo"]
lightmap_size_hint = Vector2i(5, 3)
material = SubResource("ShaderMaterial_38dvc")
radius = 0.1
height = 0.2

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_6cb44"]
transparency = 1
blend_mode = 1
cull_mode = 2
shading_mode = 0
vertex_color_use_as_albedo = true

[sub_resource type="BoxShape3D" id="BoxShape3D_7uv1g"]
size = Vector3(0.2, 0.2, 0.2)

[node name="Bullet" type="Node3D"]
script = ExtResource("1_k52cw")

[node name="BulletShell" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, -1.5246e-23, -1.5246e-23, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
mesh = SubResource("SphereMesh_n8wwo")
skeleton = NodePath("")

[node name="BulletTrail" type="MeshInstance3D" parent="BulletShell"]
transform = Transform3D(-4.37114e-08, 1, 3.48787e-16, -1, -4.37114e-08, -3.48787e-16, -3.48787e-16, -3.48787e-16, 1, 0, 0, 0)
visible = false
material_override = SubResource("StandardMaterial3D_6cb44")
skeleton = NodePath("../..")
script = ExtResource("2_kpbgb")
_fromWidth = 0.1
_scaleAcceleration = 0.5
_startColor = Color(0.65098, 0, 0, 1)
_endColor = Color(1, 0.152941, 0.109804, 0)

[node name="HitArea" type="Area3D" parent="."]
unique_name_in_owner = true

[node name="CollisionShape3D" type="CollisionShape3D" parent="HitArea"]
transform = Transform3D(0.794221, -0.601373, 0.0869661, 0.538575, 0.630449, -0.558991, 0.281334, 0.4908, 0.8246, 0, 0, 0)
shape = SubResource("BoxShape3D_7uv1g")

[node name="BulletLifeTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true
autostart = true

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("3_htjgl")
autoplay = true

[connection signal="body_entered" from="HitArea" to="." method="_on_hit_area_body_entered"]
[connection signal="timeout" from="BulletLifeTimer" to="." method="_on_bullet_life_timer_timeout"]
